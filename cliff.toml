[changelog]
header = """
# Changelog

All notable changes to this project will be documented in this file.

Each stable version of the dotfiles repository is tagged with a date in the
format `YYYY.MM.DD(.P)`, where `P` is an optional patch version separated by a
dot if more than one version was released in the same day.

"""
body = """
{%- set changelog_commit = "chore: update the changelog" -%}

{%- macro next_version() -%}
  {%- set date = now() | date(format="%Y.%m.%d") -%}
  {%- set previous_version = previous.version | default(value="") -%}
  {%- if previous_version is starting_with(date) -%}
    {%- set parts = previous.version | split(pat=".") -%}
    {%- if parts | length == 4 -%}
      {%- set patch = parts[3] | int + 1 -%}
      {{ date ~ "." ~ patch }}
    {%- else -%}
      {{ date ~ ".1" }}
    {%- endif -%}
  {%- else -%}
    {{ date }}
  {%- endif -%}
{%- endmacro -%}

{%- macro remote_url(path="") -%}
  https://github.com/\
  {{ remote.github.owner }}/\
  {{ remote.github.repo }}\
  {%- if path -%}/{{ path }}{%- endif -%}
{%- endmacro remote_url -%}

{%- macro tag_url(tag) -%}
  {{ self::remote_url(path="releases/tag/" ~ tag) }}
{%- endmacro tag_url -%}

{%- macro parse_commit(commit) -%}
  {%- if not commit.conventional -%}
    {%- set commit_lines = commit.message | split(pat="\n") -%}
    {%- set commit_message = commit_lines[0] | trim -%}
  {%- else -%}
    {%- set commit_message = commit.message -%}
  {%- endif -%}
  {{ commit_message | upper_first }}
{%- endmacro parse_commit -%}

{%- macro print_commit(commit) -%}
  - {% if commit.scope %}*({{ commit.scope }})* {% endif %}\
    {% if commit.breaking %}[**breaking**] {% endif %}\
    {{ self::parse_commit(commit=commit) }} - \
    ([{{ commit.id | truncate(length=7, end="") }}]\
    ({{ self::remote_url() }}/commit/{{ commit.id }}))\
{%- endmacro print_commit -%}

{%- macro has_valid_commits(commits, message) -%}
  {%- for commit in commits -%}
    {%- if commit.raw_message != message -%}
      true
      {%- break -%}
    {%- endif -%}
  {%- endfor -%}
{%- endmacro has_valid_commits -%}

{%- set current_version = version | default(value=self::next_version()) -%}
## [{{ current_version }}]({{ self::tag_url(tag=current_version) }})

{% for group, commits in commits
| filter(attribute="merge_commit", value=false)
| group_by(attribute="group") -%}
  {%- if self::has_valid_commits(commits=commits, message=changelog_commit) -%}
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits
    | filter(attribute="scope")
    | sort(attribute="scope") %}
      {{ self::print_commit(commit=commit) }}
    {%- endfor %}
    {% for commit in commits %}
      {%- if commit.raw_message == changelog_commit -%}
        {# Skip the changelog update commit #}
        {%- continue -%}
      {%- endif -%}
      {%- if not commit.scope -%}
        {{ self::print_commit(commit=commit) }}
      {% endif -%}
    {% endfor -%}
  {%- endif -%}
{% endfor %}

"""
footer = """
<!-- generated by git-cliff -->
"""
trim = true
render_always = false
postprocessors = []
output = "CHANGELOG.md"

[git]
conventional_commits = true
filter_unconventional = false
require_conventional = false
split_commits = false
commit_preprocessors = []
commit_parsers = [
  {message = "^feat", group = "<!-- 00 -->⛰️ Added"},
  {message = "^fix", group = "<!-- 01 -->🐛 Fixed"},
  {message = "^refactor", group = "<!-- 02 -->🛠️ Refactored"},
  {message = "^perf", group = "<!-- 03 -->⚡️ Performance"},
  {message = "^test", group = "<!-- 04 -->🧪 Testing"},
  {message = "^style", group = "<!-- 05 -->🎨 Style"},
  {message = "^docs", group = "<!-- 06 -->📚 Documentation"},
  {message = "^chore", group = "<!-- 07 -->🔧 Chore"},
  {message = "^ci", group = "<!-- 08 -->👷 CI"},
  {message = "^build", group = "<!-- 09 -->🏗️ Build"},
  {message = "^revert", group = "<!-- 10 -->⏪ Reverted"},
  {message = ".*", group = "<!-- 11 -->💼 Other"},
]
protect_breaking_commits = false
filter_commits = false
tag_pattern = "[0-9]{4}\\.[0-9]{2}\\.[0-9]{2}(\\.[0-9]+)?"
skip_tags = ""
ignore_tags = ""
count_tags = ""
topo_order = false
topo_order_commits = true
sort_commits = "oldest"
link_parsers = []

[remote.github]
owner = "mariovagomarzal"
repo = "dotfiles"
